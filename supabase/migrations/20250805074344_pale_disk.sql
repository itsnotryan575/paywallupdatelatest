/*
  # Create profile data collection table for developer analytics

  1. New Tables
    - `collected_profiles_data`
      - `id` (bigint, primary key, auto-increment)
      - `user_id` (uuid, references auth.users)
      - `profile_data` (jsonb, complete profile information)
      - `operation_type` (text, 'create' or 'update')
      - `profile_id` (bigint, the local profile ID)
      - `collected_at` (timestamp, when data was collected)

  2. Security
    - Enable RLS on `collected_profiles_data` table
    - Add policy for authenticated users to insert their own data
    - Add policy for service role to read all data (developer access)
    - Users can only see their own collected data

  3. Notes
    - This table is for developer analytics and debugging
    - All profile data is stored as JSONB for easy querying
    - Includes operation type to track creates vs updates
    - Links to auth.users for proper user attribution
*/

CREATE TABLE IF NOT EXISTS collected_profiles_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  profile_data JSONB NOT NULL,
  operation_type TEXT NOT NULL CHECK (operation_type IN ('create', 'update')),
  profile_id BIGINT,
  collected_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create index for better query performance
CREATE INDEX IF NOT EXISTS idx_collected_profiles_user_id ON collected_profiles_data(user_id);
CREATE INDEX IF NOT EXISTS idx_collected_profiles_collected_at ON collected_profiles_data(collected_at);
CREATE INDEX IF NOT EXISTS idx_collected_profiles_operation_type ON collected_profiles_data(operation_type);

ALTER TABLE collected_profiles_data ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to insert their own profile data
CREATE POLICY "Users can insert their own profile data"
  ON collected_profiles_data
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Allow users to read their own collected data
CREATE POLICY "Users can read their own collected data"
  ON collected_profiles_data
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Allow service role to read all collected data (for developers)
CREATE POLICY "Service role can read all collected data"
  ON collected_profiles_data
  FOR SELECT
  TO service_role
  USING (true);

-- Allow service role to update/delete collected data (for data management)
CREATE POLICY "Service role can manage all collected data"
  ON collected_profiles_data
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);