/*
  # Create feedback table for user feedback system

  1. New Tables
    - `feedback`
      - `id` (bigint, primary key, auto-increment)
      - `type` (text, feedback type: bug/feature/issue/feedback)
      - `subject` (text, feedback subject/title)
      - `message` (text, detailed feedback message)
      - `userEmail` (text, optional user email for follow-up)
      - `deviceInfo` (text, device information for debugging)
      - `appVersion` (text, app version when feedback was submitted)
      - `status` (text, feedback status: open/in_progress/resolved/closed)
      - `createdAt` (timestamp, when feedback was created)

  2. Security
    - Enable RLS on `feedback` table
    - Add policy for anyone to insert feedback (public submission)
    - Add policy for authenticated users to read all feedback (admin access)
    - Add policy for authenticated users to update feedback status
*/

CREATE TABLE IF NOT EXISTS feedback (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type TEXT NOT NULL CHECK (type IN ('bug', 'feature', 'issue', 'feedback')),
  subject TEXT NOT NULL,
  message TEXT NOT NULL,
  userEmail TEXT,
  deviceInfo TEXT,
  appVersion TEXT,
  status TEXT DEFAULT 'open' CHECK (status IN ('open', 'in_progress', 'resolved', 'closed')),
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE feedback ENABLE ROW LEVEL SECURITY;

-- Allow anyone to submit feedback (public access)
CREATE POLICY "Anyone can submit feedback"
  ON feedback
  FOR INSERT
  TO anon, authenticated
  WITH CHECK (true);

-- Allow authenticated users to read all feedback (admin access)
CREATE POLICY "Authenticated users can read all feedback"
  ON feedback
  FOR SELECT
  TO authenticated
  USING (true);

-- Allow authenticated users to update feedback status (admin access)
CREATE POLICY "Authenticated users can update feedback status"
  ON feedback
  FOR UPDATE
  TO authenticated
  USING (true)
  WITH CHECK (true);